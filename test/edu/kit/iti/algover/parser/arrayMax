method max(a : array<int>, n: int) returns (m : int)
  requires n > 0
  ensures label greater: (forall i:int :: 0 <= i && i < n ==> a[m] > a[i])
  ensures label witness: (exists i:int :: 0 <= i && i < n && a[m] == a[i])
  decreases 0
{
//  assert n == a.Length;

  var i:int := 0;
  label mainLoop: while i < n
    invariant label inbounds: 0 <= i && i <= n
    invariant label greater: (forall j:int :: 0 <= j && j < i ==> a[m] >= a[j])
    invariant label witness: i == 0 || (exists j:int :: 0 <= j && j < i && a[m] == a[j])
    decreases n - i
  {
    if a[i] > a[m]
    {
      m := i;
    }
    i := i+1;
  }
}



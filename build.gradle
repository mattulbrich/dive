plugins {
    id "com.github.hierynomus.license" version "0.15.0" apply false
}

allprojects {
    apply plugin: 'idea'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'base'
    apply plugin: 'checkstyle'
    apply plugin: "com.github.hierynomus.license"

    sourceCompatibility = '1.11'
    targetCompatibility = '1.11'

    version = '0.1-SNAPSHOT'
    archivesBaseName = 'DIVE-Application'

    repositories {
        flatDir { dirs "lib", "$rootDir/lib" }
        mavenCentral()
        jcenter()
    }

    sourceSets {
        main {
            java {
                srcDirs 'src'
            }
            resources {
                srcDirs 'res'
            }
        }

        test {
            java {
                srcDirs = ['test']
            }
            resources {
                srcDirs = ['test-res']
            }
        }
    }

    dependencies {
        implementation group: 'com.google.guava', name: 'guava', version: '27.1-jre'

        implementation name: 'nonnull-runtime'

        testImplementation 'junit:junit:4.12'
        testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.1'
        testImplementation group: 'pl.pragmatists', name: 'JUnitParams', version: '1.1.1'

        checkstyle group: 'com.puppycrawl.tools', name: 'checkstyle', version: '8.21'

    }

    tasks.withType(JavaCompile) {
        options.fork = true
        options.compilerArgs = ["-Werror", "-Xlint:unchecked", "-Xlint:rawtypes"]
        options.debug = true
    }

    /*
     * Tests now exclude acknowledged issues.
     */
    test {
        useJUnit {
            excludeCategories 'edu.kit.iti.algover.KnownRegression'
        }
    }

    /*
     * Acknowledged issues can be tested separately.
     * This task here records error but does not fail the build.
     */
    task testKnownRegressions(type: Test) {
        useJUnit {
            includeCategories 'edu.kit.iti.algover.KnownRegression'
        }
        ignoreFailures=true
    }

    tasks.withType(Checkstyle) {
        ignoreFailures=true

        // doLast {
        //     reports.all { report ->
        //         def outputFile = report.destination
        //         if (outputFile.exists() && outputFile.text.contains("severity=\"error\"")) {
        //             throw new GradleException("There were checkstyle errors! For more info check $outputFile")
        //         }
        //     }
        // }

        reports {
            xml.enabled true
        }
    }

    license {
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        header file("$rootDir/HEADER")
        include "$projectDir/src/**/*.java"
        exclude "$projectDir/gen/**/*.java"
        mapping {
            java = "SLASHSTAR_STYLE"
        }

    }

    
}


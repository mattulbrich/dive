plugins {
    id "com.github.hierynomus.license" version "0.15.0" apply false
}

allprojects {
    apply plugin: 'idea'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'base'
    apply plugin: 'checkstyle'
    apply plugin: "com.github.hierynomus.license"

    sourceCompatibility = '1.11'
    targetCompatibility = '1.11'

    version = '0.1-SNAPSHOT'
    archivesBaseName = 'DIVE-Application'

    repositories {
        flatDir { dirs "lib", "$rootDir/lib" }
        mavenCentral()
        jcenter()
    }

    sourceSets {
        main {
            java {
                srcDirs 'src'
            }
            resources {
                srcDirs 'res'
            }
        }

        test {
            java {
                srcDirs = ['test']
            }
            resources {
                srcDirs = ['test-res']
            }


        }


    }

    dependencies {
        compile group: 'com.google.guava', name: 'guava', version: '27.1-jre'

        compile name: 'jpplib'
        compile name: 'nonnull'

        testCompile 'junit:junit:4.12'
        testCompile group: 'org.hamcrest', name: 'hamcrest', version: '2.1'
        testCompile group: 'pl.pragmatists', name: 'JUnitParams', version: '1.1.1'

        checkstyle group: 'com.puppycrawl.tools', name: 'checkstyle', version: '5.7'

    }

    tasks.withType(JavaCompile) {
        options.fork = true
        options.compilerArgs = ["-Werror", "-Xlint:unchecked", "-Xlint:rawtypes"]
        options.debug = true
    }

    tasks.withType(Checkstyle) {
        config = project.resources.text.fromFile("$rootDir/tools/checkstyle.xml")
        ignoreFailures=true

        doLast {
            reports.all { report ->
                def outputFile = report.destination
                if (outputFile.exists() && outputFile.text.contains("<error ")) {
                    throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
                }
            }
        }

        reports {
            xml.enabled true
        }
    }

    license {
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        header file("$rootDir/HEADER")
        //strictCheck true
    }
}


plugins {
    id 'org.openjfx.javafxplugin' version '0.0.7'
}

/*javafx {
    version = "12"
    modules = ["javafx.base"]
}*/

apply from: 'makeDafnyTreeVisitor.gradle'

configurations {
    antlr3
    antlr4
}

sourceSets {
    main {
        java {
            srcDir 'gen'
        }
    }
}

dependencies {

    api group: 'javax.xml.bind', name: 'jaxb-api', version: '2.4.0-b180830.0359'
    api group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.4.0-b180830.0438'
    api group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0.1'

    api group: 'com.io7m.jpplib', name: 'com.io7m.jpplib', version: '0.8.0'
    api group: 'com.io7m.jpplib', name: 'com.io7m.jpplib.core', version: '0.8.0'
    api group: 'com.io7m.jpplib', name: 'com.io7m.jpplib.demo', version: '0.8.0'
    // jpplib uses slf4j. Unless the following is specified, a nasty error message
    // will occur.
    api group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.21'
    implementation 'org.junit.jupiter:junit-jupiter:5.4.2'

    antlr3 group: 'org.antlr', name: 'antlr', version: '3.5.2'
    api group: 'org.antlr', name: 'antlr-runtime', version: '3.5.2'
    api group: 'org.antlr', name: 'stringtemplate', version: '3.2'

    antlr4 "org.antlr:antlr4:4.7.1"
    api "org.antlr:antlr4-runtime:4.7.1"


}

//buildVisitor.outputs.dir ="$projectDir/gen/edu/kit/iti/algover/parser"
//buildVisitor.inputs.files=file("$projectDir/gen/Dafny.tokens")

task runAntlr3(type:JavaExec) {
    doFirst { println "Building Dafny Parser" }

    inputs.files "antlr/edu/kit/iti/algover/parser/Dafny.g"
    classpath { configurations.antlr3.getAsPath()}
    outputs.dir "$projectDir/gen/edu/kit/iti/algover/parser"

    workingDir = "antlr"
    main = "org.antlr.Tool"

    args = [ "-verbose", "-o", "$projectDir/gen", "edu/kit/iti/algover/parser/Dafny.g"]
}

test {
    // The following may be added to theses: "-Dde.matul.nonnull.debug=true",
    jvmArgs = [  "-javaagent:../../lib/nonnull-all.jar=edu" ]
    testLogging  {
       exceptionFormat "full"
       showStackTraces = true
       // showStandardStreams = true
   }
}

task runAntlr4(type:JavaExec) {
    doFirst { println "Building Script Parser" }

    inputs.files configurations.antlr4
    inputs.file "src/edu/kit/iti/algover/script/ScriptLanguage.g4"
    outputs.dir "$projectDir/gen"
    classpath { configurations.antlr4.getAsPath()}

    main = "org.antlr.v4.Tool"
    workingDir = "src"

    args = ["-visitor", "-o", "$projectDir/gen", "edu/kit/iti/algover/script/ScriptLanguage.g4", "-package", "edu.kit.iti.algover.script" ]
}

task runAntlr4Nu(type:JavaExec) {
    println "Building Script Parser"

    inputs.files configurations.antlr4
    inputs.file "src/edu/kit/iti/algover/nuscript/parser/Script.g4"
    outputs.dir "$projectDir/gen"
    classpath { configurations.antlr4.getAsPath()}

    main = "org.antlr.v4.Tool"
    workingDir = "src"

    args = ["-visitor", "-o", "$projectDir/gen", "edu/kit/iti/algover/nuscript/parser/Script.g4", "-package", "edu.kit.iti.algover.nuscript.parser" ]
}


clean.doFirst {
    delete("$projectDir/gen/edu/kit/iti/algover/parser")
    delete("$projectDir/gen/edu/kit/iti/algover/script")
    delete("$projectDir/gen/")
}

buildVisitor.shouldRunAfter runAntlr3

compileJava.dependsOn runAntlr3
compileJava.dependsOn buildVisitor
// compileJava.dependsOn runAntlr4
compileJava.dependsOn runAntlr4Nu



task DiveDoclet(type: JavaCompile) {
    source = ["$rootDir/tools"]
    include "DiveDoclet.java"
    println source
    destinationDir = file("$buildDir/tools")
    sourceCompatibility = "1.7"
    targetCompatibility = "1.7"
    options.compilerArgs = []
    classpath = project.objects.fileCollection()
}

task referenceManual(type: Javadoc) {
    dependsOn(DiveDoclet)

    source sourceSets.main.java

    classpath = sourceSets.main.runtimeClasspath
    destinationDir = file("$buildDir/resources/main/edu/kit/iti/algover")

    options.doclet "DiveDoclet"
    options.docletpath file("$buildDir/tools")
    options.windowTitle()
    // options.showFromPrivate()
}


/*
This would require a directors src/main/antlr/...
generateGrammarSource {
        source = file("$projectDir/edu/kit/iti/algover/script/ScriptLanguage.g4")
        outputDirectory = file("gen")
        arguments += ["-visitor",
                      "-long-messages",
                      "-o", "gen",
                      "-package", "edu.kit.iti.algover.script"]

}*/

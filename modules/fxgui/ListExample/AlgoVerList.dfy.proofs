<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
<comment>Created by DIVE at Thu Sep 12 18:45:48 CEST 2019</comment>
<entry key="List.removeAt/then/else/Bounds">boogie;
</entry>
<entry key="List.getAt/InitInv"></entry>
<entry key="List.insertAt/loop/Inv.1">expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.removeAt/else/loop/Dec">boogie;
</entry>
<entry key="List.getAt/InitInv[nodeInv]"></entry>
<entry key="List.getAt/loop/Inv.1">boogie;
</entry>
<entry key="List.removeAt/else/loop/Inv.1">expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.insertAt/loop_exit/Modifies[Init]">expand on='... ((?match: this.Valid())) ... |-';
</entry>
<entry key="List.removeAt/then/Post">boogie;
</entry>
<entry key="List.removeAt/then/then/Bounds.1"></entry>
<entry key="List.removeAt/else/loop_exit/else/Post">boogie;
</entry>
<entry key="List.Valid/Null.3">boogie;
</entry>
<entry key="List.Valid/Null.2">boogie;
</entry>
<entry key="List.Valid/Null.1">boogie;
</entry>
<entry key="List.getAt/loop_exit/Null"></entry>
<entry key="List.removeAt/else/loop_exit/Null.1">expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.removeAt/else/loop_exit/Null.2">expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.getAt/InitInv.1">boogie;
</entry>
<entry key="List.insertAt/loop/Null">expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.removeAt/else/loop_exit/else/Bounds.1"></entry>
<entry key="List.insertAt/InitInv.1">expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.insertAt/loop_exit/Bounds.1"></entry>
<entry key="List.insertAt/loop_exit/Bounds.2"></entry>
<entry key="List.insertAt/loop_exit/Bounds.3"></entry>
<entry key="List.removeAt/else/loop_exit/then/Bounds">boogie;
</entry>
<entry key="List.removeAt/then/else/Bounds.1"></entry>
<entry key="List.getAt/loop_exit/Post">expand on='... ((?match: this.Valid())) ... |-';
andLeft on='... ((?match: |this.seqq| == |this.nodeseqq| &amp;&amp; |this.seqq| &gt;= 1 &amp;&amp; this.head != null &amp;&amp; (forall n:int :: (n &gt;= 0 &amp;&amp; n &lt; |this.nodeseqq| ==&gt; this.nodeseqq[n] != null)) &amp;&amp; (forall i:int :: (i &gt;= 0 &amp;&amp; i &lt; |this.seqq| ==&gt; this.seqq[i] == this.nodeseqq[i].value)) &amp;&amp; (forall k:int :: (k &gt;= 0 &amp;&amp; k &lt; |this.nodeseqq| - 1 ==&gt; this.nodeseqq[k].next != null)) &amp;&amp; this.nodeseqq[0] == this.head &amp;&amp; this.nodeseqq[(|this.nodeseqq| - 1)].next == null &amp;&amp; (forall j:int :: (j &gt;= 0 &amp;&amp; j &lt; |this.nodeseqq| - 1 ==&gt; this.nodeseqq[j].next == this.nodeseqq[(j + 1)])))) ... |-';
andLeft on='... ((?match: |this.seqq| == |this.nodeseqq| &amp;&amp; |this.seqq| &gt;= 1 &amp;&amp; this.head != null &amp;&amp; (forall n:int :: (n &gt;= 0 &amp;&amp; n &lt; |this.nodeseqq| ==&gt; this.nodeseqq[n] != null)) &amp;&amp; (forall i:int :: (i &gt;= 0 &amp;&amp; i &lt; |this.seqq| ==&gt; this.seqq[i] == this.nodeseqq[i].value)) &amp;&amp; (forall k:int :: (k &gt;= 0 &amp;&amp; k &lt; |this.nodeseqq| - 1 ==&gt; this.nodeseqq[k].next != null)) &amp;&amp; this.nodeseqq[0] == this.head &amp;&amp; this.nodeseqq[(|this.nodeseqq| - 1)].next == null)) ... |-';
andLeft on='... ((?match: |this.seqq| == |this.nodeseqq| &amp;&amp; |this.seqq| &gt;= 1 &amp;&amp; this.head != null &amp;&amp; (forall n:int :: (n &gt;= 0 &amp;&amp; n &lt; |this.nodeseqq| ==&gt; this.nodeseqq[n] != null)) &amp;&amp; (forall i:int :: (i &gt;= 0 &amp;&amp; i &lt; |this.seqq| ==&gt; this.seqq[i] == this.nodeseqq[i].value)) &amp;&amp; (forall k:int :: (k &gt;= 0 &amp;&amp; k &lt; |this.nodeseqq| - 1 ==&gt; this.nodeseqq[k].next != null)) &amp;&amp; this.nodeseqq[0] == this.head)) ... |-';
andLeft on='... ((?match: |this.seqq| == |this.nodeseqq| &amp;&amp; |this.seqq| &gt;= 1 &amp;&amp; this.head != null &amp;&amp; (forall n:int :: (n &gt;= 0 &amp;&amp; n &lt; |this.nodeseqq| ==&gt; this.nodeseqq[n] != null)) &amp;&amp; (forall i:int :: (i &gt;= 0 &amp;&amp; i &lt; |this.seqq| ==&gt; this.seqq[i] == this.nodeseqq[i].value)) &amp;&amp; (forall k:int :: (k &gt;= 0 &amp;&amp; k &lt; |this.nodeseqq| - 1 ==&gt; this.nodeseqq[k].next != null)))) ... |-';
andLeft on='... ((?match: |this.seqq| == |this.nodeseqq| &amp;&amp; |this.seqq| &gt;= 1 &amp;&amp; this.head != null &amp;&amp; (forall n:int :: (n &gt;= 0 &amp;&amp; n &lt; |this.nodeseqq| ==&gt; this.nodeseqq[n] != null)) &amp;&amp; (forall i:int :: (i &gt;= 0 &amp;&amp; i &lt; |this.seqq| ==&gt; this.seqq[i] == this.nodeseqq[i].value)))) ... |-';
inst on='(forall i:int :: i &gt;= 0 &amp;&amp; i &lt; |this.seqq| ==&gt; this.seqq[i] == this.nodeseqq[i].value)'
     with='idx₁';
boogie;</entry>
<entry key="List.removeAt/else/loop/Null">expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.removeAt/else/loop_exit/then/Post">boogie;
</entry>
<entry key="List.removeAt/then/else/Null"></entry>
<entry key="List.insertAt/loop_exit/Null">expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.removeAt/else/loop_exit/Post">boogie;
</entry>
<entry key="List.removeAt/else/InitInv.1">expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.size/loop/Inv.1">expand on='... ((?match: this.Valid())) ... |-';
andLeft on='... ((?match: |this.seqq| == |this.nodeseqq| &amp;&amp; |this.seqq| &gt;= 1 &amp;&amp; this.head != null &amp;&amp; (forall n:int :: (n &gt;= 0 &amp;&amp; n &lt; |this.nodeseqq| ==&gt; this.nodeseqq[n] != null)) &amp;&amp; (forall i:int :: (i &gt;= 0 &amp;&amp; i &lt; |this.seqq| ==&gt; this.seqq[i] == this.nodeseqq[i].value)) &amp;&amp; (forall k:int :: (k &gt;= 0 &amp;&amp; k &lt; |this.nodeseqq| - 1 ==&gt; this.nodeseqq[k].next != null)) &amp;&amp; this.nodeseqq[0] == this.head &amp;&amp; this.nodeseqq[(|this.nodeseqq| - 1)].next == null &amp;&amp; (forall j:int :: (j &gt;= 0 &amp;&amp; j &lt; |this.nodeseqq| - 1 ==&gt; this.nodeseqq[j].next == this.nodeseqq[(j + 1)])))) ... |-';
inst on='(forall j:int :: j &gt;= 0 &amp;&amp; j &lt; |this.nodeseqq| - 1 ==&gt; this.nodeseqq[j].next == this.nodeseqq[(j + 1)])'
     with='s₁';
boogie ;
</entry>
<entry key="List.size/loop/Inv.2">expand on='... ((?match: this.Valid())) ... |-';
substitute on='|- ... ((?match: let node := node₁ :: let s := s₁ :: let node := node.next :: let s := s + 1 :: node == this.nodeseqq[s])) ...';
substitute on='|- ... ((?match: let s := s₁ :: let node := node₁.next :: let s := s + 1 :: node == this.nodeseqq[s])) ...';
substitute on='|- ... ((?match: let node := node₁.next :: let s := s₁ + 1 :: node == this.nodeseqq[s])) ...';
substitute on='|- ... ((?match: let s := s₁ + 1 :: node₁.next == this.nodeseqq[s])) ...';
andLeft on='... ((?match: |this.seqq| == |this.nodeseqq| &amp;&amp; |this.seqq| &gt;= 1 &amp;&amp; this.head != null &amp;&amp; (forall n:int :: (n &gt;= 0 &amp;&amp; n &lt; |this.nodeseqq| ==&gt; this.nodeseqq[n] != null)) &amp;&amp; (forall i:int :: (i &gt;= 0 &amp;&amp; i &lt; |this.seqq| ==&gt; this.seqq[i] == this.nodeseqq[i].value)) &amp;&amp; (forall k:int :: (k &gt;= 0 &amp;&amp; k &lt; |this.nodeseqq| - 1 ==&gt; this.nodeseqq[k].next != null)) &amp;&amp; this.nodeseqq[0] == this.head &amp;&amp; this.nodeseqq[(|this.nodeseqq| - 1)].next == null &amp;&amp; (forall j:int :: (j &gt;= 0 &amp;&amp; j &lt; |this.nodeseqq| - 1 ==&gt; this.nodeseqq[j].next == this.nodeseqq[(j + 1)])))) ... |-';
andLeft on='... ((?match: |this.seqq| == |this.nodeseqq| &amp;&amp; |this.seqq| &gt;= 1 &amp;&amp; this.head != null &amp;&amp; (forall n:int :: (n &gt;= 0 &amp;&amp; n &lt; |this.nodeseqq| ==&gt; this.nodeseqq[n] != null)) &amp;&amp; (forall i:int :: (i &gt;= 0 &amp;&amp; i &lt; |this.seqq| ==&gt; this.seqq[i] == this.nodeseqq[i].value)) &amp;&amp; (forall k:int :: (k &gt;= 0 &amp;&amp; k &lt; |this.nodeseqq| - 1 ==&gt; this.nodeseqq[k].next != null)) &amp;&amp; this.nodeseqq[0] == this.head &amp;&amp; this.nodeseqq[(|this.nodeseqq| - 1)].next == null)) ... |-';
inst on='(forall j:int :: j &gt;= 0 &amp;&amp; j &lt; |this.nodeseqq| - 1 ==&gt; this.nodeseqq[j].next == this.nodeseqq[(j + 1)])'
     with='s₁';
substitute on='... ((?match: let node := node₁ :: node.next != null)) ... |-';
substitute on='... ((?match: let node := node₁ :: let s := s₁ :: node == this.nodeseqq[s])) ... |-';
substitute on='... ((?match: let s := s₁ :: node₁ == this.nodeseqq[s])) ... |-';
boogie ;</entry>
<entry key="List.size/InitInv">expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.removeAt/else/loop_exit/then/Modifies"></entry>
<entry key="List.removeAt/then/then/Bounds">boogie;
</entry>
<entry key="List.Valid/Bounds">boogie;
</entry>
<entry key="List.size/loop/Null">boogie;
</entry>
<entry key="List.insertAt/loop_exit/Post.1"></entry>
<entry key="List.removeAt/then/Null">expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.removeAt/then/Bounds">expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.getAt/loop/Inv[nodeInv]"></entry>
<entry key="List.size/loop_exit/Post">expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.size/InitInv.2">expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.size/InitInv.1">expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.removeAt/then/then/Post">boogie;
</entry>
<entry key="List.getAt/loop/Inv"></entry>
<entry key="List.removeAt/else/loop_exit/else/Null"></entry>
<entry key="List.removeAt/else/loop_exit/Modifies"></entry>
<entry key="List.insertAt/loop_exit/Bounds"></entry>
<entry key="List.removeAt/else/loop_exit/Bounds.3"></entry>
<entry key="List.removeAt/else/loop_exit/Bounds.2">boogie;
</entry>
<entry key="List.removeAt/else/loop_exit/Bounds.1">expand on='... ((?match: this.Valid())) ... |-';
</entry>
<entry key="List.removeAt/then/Bounds.3">boogie;
</entry>
<entry key="List.Valid/Bounds.7">boogie;
</entry>
<entry key="List.removeAt/else/loop_exit/else/Bounds">boogie;
</entry>
<entry key="List.Valid/Bounds.6">boogie;
</entry>
<entry key="List.removeAt/then/Bounds.2">boogie;
</entry>
<entry key="List.removeAt/then/Bounds.1">expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.removeAt/else/loop_exit/else/Modifies"></entry>
<entry key="List.getAt/loop/Dec">boogie;
</entry>
<entry key="List.Valid/Bounds.1">boogie;
</entry>
<entry key="List.Valid/Bounds.5">boogie;
</entry>
<entry key="List.Valid/Bounds.4">boogie;
</entry>
<entry key="List.Valid/Bounds.3">boogie;
</entry>
<entry key="List.Valid/Bounds.2">boogie;
</entry>
<entry key="List.removeAt/else/InitInv">boogie;
</entry>
<entry key="List.removeAt/then/Post.1">substitute on='|- ... ((?match: let $heap := $heap[this.head := this.head.next] :: let $heap := $heap[this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@$heap, 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@$heap, (pos + 1), |this.nodeseqq@$heap|)] :: let $heap := $heap[this.seqq := $seq_sub&lt;int&gt;(this.seqq@$heap, 0, pos) + $seq_sub&lt;int&gt;(this.seqq@$heap, (pos + 1), |this.seqq@$heap|)] :: this.Valid()@$heap)) ...';
substitute on='|- ... ((?match: let $heap := $heap[this.head := this.head.next][this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[this.head := this.head.next]), 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[this.head := this.head.next]), (pos + 1), |this.nodeseqq@($heap[this.head := this.head.next])|)] :: let $heap := $heap[this.seqq := $seq_sub&lt;int&gt;(this.seqq@$heap, 0, pos) + $seq_sub&lt;int&gt;(this.seqq@$heap, (pos + 1), |this.seqq@$heap|)] :: this.Valid()@$heap)) ...';
substitute on='|- ... ((?match: let $heap := $heap[this.head := this.head.next][this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[this.head := this.head.next]), 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[this.head := this.head.next]), (pos + 1), |this.nodeseqq@($heap[this.head := this.head.next])|)][this.seqq := $seq_sub&lt;int&gt;(this.seqq@(($heap[this.head := this.head.next])[this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[this.head := this.head.next]), 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[this.head := this.head.next]), (pos + 1), |this.nodeseqq@($heap[this.head := this.head.next])|)]), 0, pos) + $seq_sub&lt;int&gt;(this.seqq@(($heap[this.head := this.head.next])[this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[this.head := this.head.next]), 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[this.head := this.head.next]), (pos + 1), |this.nodeseqq@($heap[this.head := this.head.next])|)]), (pos + 1), |this.seqq@(($heap[this.head := this.head.next])[this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[this.head := this.head.next]), 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[this.head := this.head.next]), (pos + 1), |this.nodeseqq@($heap[this.head := this.head.next])|)])|)] :: this.Valid()@$heap)) ...';
expand on='|- ... ((?match: this.Valid()@$heap[this.head := this.head.next][this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[this.head := this.head.next]), 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[this.head := this.head.next]), (pos + 1), |this.nodeseqq@($heap[this.head := this.head.next])|)][this.seqq := $seq_sub&lt;int&gt;(this.seqq@(($heap[this.head := this.head.next])[this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[this.head := this.head.next]), 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[this.head := this.head.next]), (pos + 1), |this.nodeseqq@($heap[this.head := this.head.next])|)]), 0, pos) + $seq_sub&lt;int&gt;(this.seqq@(($heap[this.head := this.head.next])[this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[this.head := this.head.next]), 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[this.head := this.head.next]), (pos + 1), |this.nodeseqq@($heap[this.head := this.head.next])|)]), (pos + 1), |this.seqq@(($heap[this.head := this.head.next])[this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[this.head := this.head.next]), 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[this.head := this.head.next]), (pos + 1), |this.nodeseqq@($heap[this.head := this.head.next])|)])|)])) ...';
expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.size/loop/Inv">boogie;
</entry>
<entry key="List.removeAt/then/else/Post">boogie;
</entry>
<entry key="List.getAt/InitInv[idxInv]"></entry>
<entry key="List.removeAt/else/loop_exit/Post.1">expand on='... ((?match: this.Valid())) ... |-';
substitute on='|- ... ((?match: let node := node₁ :: let $heap := $heap[node.next := node.next.next] :: let $heap := $heap[this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@$heap, 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@$heap, (pos + 1), |this.nodeseqq@$heap|)] :: let $heap := $heap[this.seqq := $seq_sub&lt;int&gt;(this.seqq@$heap, 0, pos) + $seq_sub&lt;int&gt;(this.seqq@$heap, (pos + 1), |this.seqq@$heap|)] :: this.Valid()@$heap)) ...';
substitute on='|- ... ((?match: let $heap := $heap[node₁.next := ((node₁.next).next)] :: let $heap := $heap[this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@$heap, 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@$heap, (pos + 1), |this.nodeseqq@$heap|)] :: let $heap := $heap[this.seqq := $seq_sub&lt;int&gt;(this.seqq@$heap, 0, pos) + $seq_sub&lt;int&gt;(this.seqq@$heap, (pos + 1), |this.seqq@$heap|)] :: this.Valid()@$heap)) ...';
substitute on='|- ... ((?match: let $heap := $heap[node₁.next := ((node₁.next).next)][this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[node₁.next := ((node₁.next).next)]), 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[node₁.next := ((node₁.next).next)]), (pos + 1), |this.nodeseqq@($heap[node₁.next := ((node₁.next).next)])|)] :: let $heap := $heap[this.seqq := $seq_sub&lt;int&gt;(this.seqq@$heap, 0, pos) + $seq_sub&lt;int&gt;(this.seqq@$heap, (pos + 1), |this.seqq@$heap|)] :: this.Valid()@$heap)) ...';
substitute on='|- ... ((?match: let $heap := $heap[node₁.next := ((node₁.next).next)][this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[node₁.next := ((node₁.next).next)]), 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[node₁.next := ((node₁.next).next)]), (pos + 1), |this.nodeseqq@($heap[node₁.next := ((node₁.next).next)])|)][this.seqq := $seq_sub&lt;int&gt;(this.seqq@(($heap[node₁.next := ((node₁.next).next)])[this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[node₁.next := ((node₁.next).next)]), 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[node₁.next := ((node₁.next).next)]), (pos + 1), |this.nodeseqq@($heap[node₁.next := ((node₁.next).next)])|)]), 0, pos) + $seq_sub&lt;int&gt;(this.seqq@(($heap[node₁.next := ((node₁.next).next)])[this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[node₁.next := ((node₁.next).next)]), 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[node₁.next := ((node₁.next).next)]), (pos + 1), |this.nodeseqq@($heap[node₁.next := ((node₁.next).next)])|)]), (pos + 1), |this.seqq@(($heap[node₁.next := ((node₁.next).next)])[this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[node₁.next := ((node₁.next).next)]), 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[node₁.next := ((node₁.next).next)]), (pos + 1), |this.nodeseqq@($heap[node₁.next := ((node₁.next).next)])|)])|)] :: this.Valid()@$heap)) ...';
expand on='|- ... ((?match: this.Valid()@$heap[node₁.next := ((node₁.next).next)][this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[node₁.next := ((node₁.next).next)]), 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[node₁.next := ((node₁.next).next)]), (pos + 1), |this.nodeseqq@($heap[node₁.next := ((node₁.next).next)])|)][this.seqq := $seq_sub&lt;int&gt;(this.seqq@(($heap[node₁.next := ((node₁.next).next)])[this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[node₁.next := ((node₁.next).next)]), 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[node₁.next := ((node₁.next).next)]), (pos + 1), |this.nodeseqq@($heap[node₁.next := ((node₁.next).next)])|)]), 0, pos) + $seq_sub&lt;int&gt;(this.seqq@(($heap[node₁.next := ((node₁.next).next)])[this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[node₁.next := ((node₁.next).next)]), 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[node₁.next := ((node₁.next).next)]), (pos + 1), |this.nodeseqq@($heap[node₁.next := ((node₁.next).next)])|)]), (pos + 1), |this.seqq@(($heap[node₁.next := ((node₁.next).next)])[this.nodeseqq := $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[node₁.next := ((node₁.next).next)]), 0, pos) + $seq_sub&lt;Node&gt;(this.nodeseqq@($heap[node₁.next := ((node₁.next).next)]), (pos + 1), |this.nodeseqq@($heap[node₁.next := ((node₁.next).next)])|)])|)])) ...';
boogie ;
</entry>
<entry key="List.removeAt/else/loop_exit/then/Null"></entry>
<entry key="List.size/loop/Dec">boogie;
</entry>
<entry key="List.insertAt/loop/Dec">boogie;
</entry>
<entry key="List.insertAt/loop/Inv">boogie;
</entry>
<entry key="List.getAt/loop/Null"></entry>
<entry key="List.removeAt/else/loop_exit/Null">expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.removeAt/else/loop_exit/else/Null.1">boogie;
</entry>
<entry key="List.removeAt/else/loop_exit/else/Null.2"></entry>
<entry key="List.insertAt/loop_exit/Modifies"></entry>
<entry key="List.size/Null">boogie;
</entry>
<entry key="List.Valid/Null">boogie;
</entry>
<entry key="List.getAt/loop/Inv[idxInv]"></entry>
<entry key="List.removeAt/else/loop_exit/then/Bounds.1"></entry>
<entry key="List.removeAt/else/loop_exit/Bounds">expand on='... ((?match: this.Valid())) ... |-';
boogie ;
</entry>
<entry key="List.insertAt/InitInv">boogie;
</entry>
<entry key="List.insertAt/loop_exit/Post">expand on='... ((?match: this.Valid())) ... |-';
</entry>
<entry key="List.removeAt/else/loop/Inv">boogie;
</entry>
</properties>

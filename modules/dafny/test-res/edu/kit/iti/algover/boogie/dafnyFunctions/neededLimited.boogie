### project:

function f(x: int) : int
  decreases x, 0
{
  if x > 0 then f(x-1) * x else 1
}

### decls:

x : int

### sequent:

x > 0 |- $$f($heap, x) == $$f($heap, x-1) * x

### result:
prove

### translation:
const _$heap : Heap;
const _x : int;
function f_$$f$limited(Heap, int) : int;
function f_$$f(Heap, int) : int;

axiom $Is(_x, TInt);
axiom (forall v0: Heap :: (forall v1: int ::  $Is(f_$$f(v0, v1), TInt) ));
axiom $Is(_$heap, THeap);
axiom (forall v0: Heap :: (forall v1: int ::  $Is(f_$$f$limited(v0, v1), TInt) ));
axiom (forall var_x:int, var_heap:Heap :: {f_$$f(var_heap, var_x)} (f_$$f(var_heap, var_x) == (if (var_x > 0) then (f_$$f$limited(_$heap, (var_x - 1)) * var_x) else 1)));
axiom (forall var_v1:int, var_v0:Heap :: {f_$$f(var_v0, var_v1)} (f_$$f(var_v0, var_v1) == f_$$f$limited(var_v0, var_v1)));

procedure Sequent()
  ensures false;
{
  assume (_x > 0);
  assume !((f_$$f(_$heap, _x) == (f_$$f(_$heap, (_x - 1)) * _x)));
}
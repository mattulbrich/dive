### decls:
aheap : heap
mod : set<object>
o : C
C$$f : field<C, int>

### project:

class C { var f : int; }

### sequent:
|- o.f@$anon($heap, mod, aheap) == o.f

### result:
fail

### translation:
const _$heap : Heap;
const _aheap : Heap;
const _mod : Set ref;
const _o : ref;
const unique TClass_C : Ty;
const unique _C$$f : Field int;

axiom (forall x:ref :: $Is(x, TClass_C) <==> dtype(x) == TClass_C || x == null);
axiom $Is(_$heap, THeap);
axiom $Is(_mod, TSet(TObject));
axiom $Is(_aheap, THeap);
axiom $Is(_o, TClass_C);
axiom $Is(_C$$f, TField(TInt));

procedure Sequent()
  ensures false;
{
  assume !((read(anon(_$heap, _mod, _aheap), _o, _C$$f) == read(_$heap, _o, _C$$f)));
}